import { ILogger } from "@js-soft/logging-abstractions";
import { Result } from "@js-soft/ts-utils";
import { INativeFileAccess } from "./INativeFileAccess";

enum AppType {
    Debug = "debug",
    Release = "release",
    Webapp = "webapp"
}

/**
 * Default configuration of the app: This is the set of configurations utilized by the native implementations.
 * Additional default configuration entries can be added to the configuration file on demand and will be available to the app at runtime.
 */
export interface IAppConfig {
    /**
     * Name of the app
     */
    name: string;
    /**
     * Id of the app
     */
    applicationId: string;
    /**
     * Development type of the app
     */
    type: AppType;
    /**
     * Remote push notification token generated by the app during initialization
     */
    pushToken: string | null;
    cordova?: ICordovaConfig;
    electron?: IElectronConfig;
    firebase?: IFirebaseConfig;
    localforage?: ILocalForageConfig;
    launchOptions?: ILaunchOptionsConfig;
}

/**
 * Configuration of firebase which can be accessed through the firebase console
 */
export interface IFirebaseConfig {
    config: {
        apiKey: string;
        authDomain: string;
        projectId: string;
        storageBucket: string;
        messagingSenderId: string;
        appId: string;
    };
    vapidKey: string;
}

/**
 * [Configuration](https://github.com/localForage/localForage#configuration) of [Local Forage](https://github.com/localForage/localForage)
 */
export interface ILocalForageConfig {
    /**
     * Storage location (indexeddb, websql)
     */
    driver: string;
    /**
     * Name of app
     */
    name: string;
    /**
     * Version number of app
     */
    version: number;
    /**
     * Size of database
     */
    size: number;
    /**
     * Name of created storage
     */
    storeName: string;
    /**
     * Description of created storage
     */
    description: string;
}

/**
 * Configuration of the electron platform
 */
export interface IElectronConfig {
    /**
     * Days after which the stored ids of received remote push notifications should be deleted
     */
    persistentIDsremoveDays: number;
    /**
     * Firebase cloud messaging sender-id which can be accessed through the firebase console
     */
    fcmSenderId: string;
    /**
     * Remote push notification credentials created by app during initialization
     */
    pushCredentials?: any;
    /**
     * Ids of remote push notifications are stored to prevent push notifications to be displayed multiple times
     */
    persistentIDs: any;
}

/**
 * Configuration of the launch options
 */
export interface ILaunchOptionsConfig {
    /**
     * Uri which should be registered for the app
     */
    uri: string;
}

/**
 * Configuration for the cordova platform
 */
export interface ICordovaConfig {
    /**
     * Configuration of the cordova remote push notifiction plugin (ios/android)
     */
    pushChannelConfig: {
        id: string;
        description: string;
        importance: number;
        vibration: boolean;
        visibility: number;
    };
    /**
     * Configuration of the cordova local push notifiction plugin (ios/android)
     */
    localNotificationConfig: {
        foreground: boolean;
        channel: string;
        launch: boolean;
        icon: string;
        smallIcon: string;
    };
}

/**
 * Management of default and runtime config
 */
export interface INativeConfigAccess {
    /**
     * Read the value associated to a key
     * @param key
     */
    get(key: string): Result<any>;
    /**
     * Save a key-value pair in memory
     * @param key
     * @param value
     */
    set(key: string, value: any): Result<void>;
    /**
     * Remove a key-value pair
     * @param key
     */
    remove(key: string): Result<void>;
    /**
     * Save the runtime config on the filesystem
     */
    save(): Promise<Result<void>>;
    /**
     * Initialize the default config (this does not yet require the filesystem to be initialized)
     */
    initDefaultConfig(): Promise<Result<void>>;
    /**
     * Initialize the runtime config by reading the existing runtime config from the filesystem
     * @param logger
     * @param fileAccess
     */
    initRuntimeConfig(logger: ILogger, fileAccess: INativeFileAccess): Promise<Result<void>>;
}
